<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tian.mapper.DoctorInfoMapper">
    <resultMap id="BaseResultMap" type="com.tian.entity.DoctorInfo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="doctor_Name" property="doctorName" jdbcType="VARCHAR"/>
        <result column="department_id" property="departmentId" jdbcType="INTEGER"/>
        <result column="register_type_id" property="registerTypeId" jdbcType="INTEGER"/>
        <result column="type_id" property="typeId" jdbcType="INTEGER"/>
        <result column="operation_user_id" property="operationUserId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from doctor_info  where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.tian.entity.DoctorInfo">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into doctor_info (doctor_Name, department_id, register_type_id,
        type_id, operation_user_id, `status`,
        create_time, update_time)
        values (#{doctorName,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER}, #{registerTypeId,jdbcType=INTEGER},
        #{typeId,jdbcType=INTEGER}, #{operationUserId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
        #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.tian.entity.DoctorInfo">
    update doctor_info
    set doctor_Name = #{doctorName,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=INTEGER},
      register_type_id = #{registerTypeId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      operation_user_id = #{operationUserId,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select id, doctor_Name, department_id, register_type_id, type_id, operation_user_id, 
    `status`, create_time, update_time
    from doctor_info
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectAll" resultMap="BaseResultMap" parameterType="com.tian.entity.DoctorInfo">
        select id, doctor_Name, department_id, register_type_id, type_id, operation_user_id,
        `status`, create_time, update_time
        from doctor_info
        where `status` = 0
        <if test="doctorName!=null">
            and doctor_Name = #{doctorName,jdbcType=VARCHAR}
        </if>
        <if test="typeId != null">
            and type_id = #{typeId,jdbcType=INTEGER}
        </if>
    </select>
    <select id="selectByIdList" resultMap="BaseResultMap" parameterType="list">
        select id, doctor_Name, department_id, register_type_id, type_id, operation_user_id,
        `status`, create_time, update_time
        from doctor_info
        where id in
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <select id="count" resultType="int">
        select count(1) from doctor_info where `status` = 0
        <if test="doctorName!=null">
            and doctor_Name = #{doctorName,jdbcType=VARCHAR}
        </if>
    </select>
</mapper>